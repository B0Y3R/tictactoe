{"version":3,"sources":["Square.js","TicTacToe.js","App.js","reportWebVitals.js","index.js"],"names":["Square","value","onClick","className","TicTacToe","useState","Array","fill","squares","setSquares","isXNext","setIsXNext","winner","possibleLines","i","length","a","b","c","calculateWinner","renderSquare","isBoardFull","clearBoard","nextSquares","slice","playChoice","filter","s","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAMeA,MAJf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACrB,OAAO,qBAAKC,UAAU,SAASD,QAASA,EAAjC,SAA2CD,K,MCyFvCG,MAxFf,WAAsB,IAAD,EAEcC,mBAASC,MAAM,GAAGC,KAAK,OAFrC,mBAEVC,EAFU,KAEDC,EAFC,OAGcJ,oBAAS,GAHvB,mBAGVK,EAHU,KAGDC,EAHC,KAKXC,EAiCN,SAAyBJ,GAYnB,IAXF,IAAMK,EAAgB,CAClB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAAC,IAAD,cACzBD,EAAcC,GADW,GACpCE,EADoC,KACjCC,EADiC,KAC9BC,EAD8B,KAG3C,GAAIV,EAAQQ,IAAMR,EAAQQ,KAAOR,EAAQS,IAAMT,EAAQQ,KAAOR,EAAQU,GAClE,OAAOV,EAAQQ,GAGvB,OAAO,KApDEG,CAAgBX,GA6B/B,SAASY,EAAaN,GAClB,OAAO,cAAC,EAAD,CAAQb,MAAOO,EAAQM,GAAIZ,QAAS,kBAlB/C,SAAoBY,GAChB,GAAIO,EAAYb,IAAYI,EAAQ,CAChC,IAAMU,EAAahB,MAAM,GAAGC,KAAK,MACjCE,EAAWa,OACR,CACH,IAAMC,EAAcf,EAAQgB,QAE5B,GAAmB,OAAfhB,EAAQM,GAKR,OAJAS,EAAYT,GAAMJ,EAAU,IAAM,IAClCD,EAAWc,GACXZ,GAAYD,IAQ6Be,CAAWX,MAyBhE,SAASO,EAAYb,GACjB,OAAOA,EAAQkB,QAAO,SAAAC,GAAC,OAAU,OAANA,KAAYZ,OAG3C,OACI,qCACI,sBAAKZ,UAAU,YAAf,UACI,sBAAKA,UAAU,MAAf,UACKiB,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKjB,UAAU,MAAf,UACKiB,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKjB,UAAU,MAAf,UACKiB,EAAa,GACbA,EAAa,GACbA,EAAa,SAGtB,kCA3EAR,EACO,UAAYA,EACZS,EAAYb,KAAaI,EACzB,QAED,kBAAN,OAAyBF,EAAU,IAAM,KAsEzC,W,MC5EGkB,MARf,WACE,OACE,qBAAKzB,UAAU,MAAf,SACI,cAAC,EAAD,OCMO0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a9616fd6.chunk.js","sourcesContent":["import './Square.css';\n\nfunction Square({ value, onClick }) {\n    return <div className=\"column\" onClick={onClick}>{value}</div>\n}\n\nexport default Square;","import React, { useState } from 'react';\nimport Square from './Square';\nimport './TicTacToe.css';\n\nfunction TicTacToe() {\n\n    const [squares, setSquares ] = useState(Array(9).fill(null));\n    const [isXNext, setIsXNext ] = useState(true);\n\n    const winner = calculateWinner(squares);\n\n    function getStatus() {\n        if (winner) {\n            return \"Winner \" + winner;\n        } else if (isBoardFull(squares) && !winner) {\n            return \"Draw!\"\n        } else {\n            return `Next Player is ${isXNext ? 'O' : 'X'}`;\n        }\n    }\n\n    function playChoice(i) {\n        if (isBoardFull(squares) || winner) {\n            const clearBoard = Array(9).fill(null);\n            setSquares(clearBoard);\n        } else {\n            const nextSquares = squares.slice();\n            \n            if (squares[i] === null) {\n                nextSquares[i]  = isXNext ? 'O' : 'X';\n                setSquares(nextSquares);\n                setIsXNext(!isXNext);\n            } else {\n                return;\n            }\n        }\n    }\n\n    function renderSquare(i) {\n        return <Square value={squares[i]} onClick={() => playChoice(i) } />\n    }\n\n    function calculateWinner(squares) {\n        const possibleLines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6]\n          ];\n\n          for (let i = 0; i < possibleLines.length; i++) {\n              const [a, b, c] = possibleLines[i];\n\n              if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                  return squares[a];\n              }\n          }\n          return null;\n    }\n\n    function isBoardFull(squares) {\n        return squares.filter(s => s === null).length ? false : true;\n    }\n    \n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    {renderSquare(0)}\n                    {renderSquare(1)}\n                    {renderSquare(2)}\n                </div>\n                <div className=\"row\">\n                    {renderSquare(3)}\n                    {renderSquare(4)}\n                    {renderSquare(5)}\n                </div>\n                <div className=\"row\">\n                    {renderSquare(6)}\n                    {renderSquare(7)}\n                    {renderSquare(8)}\n                </div>\n            </div>\n            <p> {getStatus()} </p>\n        </>\n    )\n}\n\nexport default TicTacToe;","import TicTacToe from './TicTacToe';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TicTacToe />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}